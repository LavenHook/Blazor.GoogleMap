@page "/map"
@inject MarkerCollectionFactory MarkerCollectionFactory;
@inject InfoWindow  InfoWindow;

<h1>Google Map</h1>

<GoogleMap OnClick="@MapOnClick" OnDoubleClick="@MapOnDoubleClick"></GoogleMap>
<GoogleMapInfoWindow Id="infoWindow">
    <div>
        <h4>Infowindow 1</h4>
        @if (selectedMarker != null)
        {
            <p>@selectedMarker.Id</p>
        }


        <button onclick="@RemoveMarker">Remove marker</button>
    </div>
</GoogleMapInfoWindow>

<GoogleMapInfoWindow Id="infoWindowSecond">
    <div>
        <h4>Infowindow 2</h4>
        @if (selectedMarker != null)
        {
            <p>@selectedMarker.Id</p>
        }


        <button onclick="@RemoveMarker">Remove marker</button>
    </div>
</GoogleMapInfoWindow>

@functions {
    int currentCount = 0;
    IMarkerCollection markers;
    Marker selectedMarker;

    protected override void OnInit()
    {
        base.OnInit();
        markers = MarkerCollectionFactory.Create();
    }

    void MapOnClick(MouseEventArgs mouseEvent)
    {
        Console.WriteLine($"Clicked! {mouseEvent.LatLng.Lat}, {mouseEvent.LatLng.Lng}");
        markers.Add(new MarkerOptions(mouseEvent.LatLng)
        {
            Title = $"Test {DateTime.Now}",
            AssociatedInfoWindowId = markers.Count % 2 == 0 ? "infoWindow" : "infoWindowSecond",
            Animation = MarkerAnimation.Drop,
            Draggable = true,
            //Label = new MarkerLabel("A"),
            //Icon = $"{GoogleMapConstants.IconBase}parking_lot_maps.png"
            OnMarkerClick = EventCallback.Factory.Create<Marker>(this, MarkerClick),
            OnDragEnd = EventCallback.Factory.Create<Marker>(this, MarkerDragEnd),
            OnMarkerRightClick = EventCallback.Factory.Create<Marker>(this, MarkerRightClick),
        });
    }

    void MapOnDoubleClick(MouseEventArgs mouseEvent)
    {
        Console.WriteLine($"DoubleClicked! {mouseEvent.LatLng.Lat}, {mouseEvent.LatLng.Lng}");
    }

    Task MarkerClick(Marker marker)
    {
        selectedMarker = marker;
        Console.WriteLine(marker.Options.Title);

        return Task.WhenAll(
            selectedMarker.SetOpacity(0.5),
            selectedMarker.SetIcon($"{GoogleMapConstants.IconBase}parking_lot_maps.png")
        );
    }

    async Task RemoveMarker()
    {
        if (selectedMarker != null)
        {
            var removedResult = await markers.Remove(selectedMarker);
            Console.WriteLine($"Marker removed: {removedResult}");
        }
    }

    void MarkerDragEnd(Marker marker)
    {
        Console.WriteLine($"MarkerDragEnd: {marker.Options.Position}");
    }

    void MarkerRightClick(Marker marker)
    {
        marker.OpenInfoWindow(new MarkupString("<div><h4>Simple static content</h4></div>"));
    }
}
