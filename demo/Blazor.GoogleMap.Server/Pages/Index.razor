@page "/"

<h1>Hello, world!</h1>

@inject MarkerCollectionFactory MarkerCollectionFactory;
@inject InfoWindow InfoWindow
@inject IJSRuntime JsRuntime;

<h3>This is a Google Map component demo for a Blazor App.</h3>

<GoogleMap OnClick="(args)=>MapOnClick(args)" OnDoubleClick="(args)=>MapOnDoubleClick(args)" InitialMapOptions="@initialMapOptions"></GoogleMap>

<GoogleMapInfoWindow Id="infoWindow">
    <div>
        <h4>Infowindow 1</h4>
        @if (selectedMarker != null)
        {
            <p>@selectedMarker.Id</p>
        }

        <button @onclick="()=>RemoveMarker()">Remove marker</button>

    </div>
</GoogleMapInfoWindow>

<GoogleMapInfoWindow Id="infoWindowSecond">
    <div>
        <h4>Infowindow 2</h4>
        @if (selectedMarker != null)
        {
            <p>@selectedMarker.Id</p>
        }

        <button @onclick="()=>RemoveMarker()">Remove marker</button>

    </div>
</GoogleMapInfoWindow>

@functions {
    int currentCount = 0;
    IMarkerCollection markers;
    Marker selectedMarker;
    InitialMapOptions initialMapOptions;


    protected async override Task OnInitializedAsync()
    {
        await base.OnInitializedAsync();
        markers = MarkerCollectionFactory.Create();

        initialMapOptions = new InitialMapOptions
        {
            Center = new Blazor.GoogleMap.Map.Coordinates.LatLng
            {
                Lat = 41.058002,
                Lng = 29.0416793
            },
            Zoom = 5,
            Height = "400px",
            Width = "100%",
            FullscreenControl = true,
            MapTypeControl = false,
            MapTypeId = MapTypes.Roadmap,
            RotateControl = false,
            ScaleControl = false,
            Scrollwheel = true,
            StreetViewControl = false,
            ZoomControl = false
        };
    }

    void MapOnClick(Blazor.GoogleMap.Map.Events.MouseEventArgs mouseEvent)
    {
        Console.WriteLine($"Clicked! {mouseEvent.LatLng.Lat}, {mouseEvent.LatLng.Lng}");
        markers.Add(new MarkerOptions(mouseEvent.LatLng)
        {
            Title = $"Test {DateTime.Now}",
            AssociatedInfoWindowId = markers.Count % 2 == 0 ? "infoWindow" : "infoWindowSecond",
            OnMarkerClick = EventCallback.Factory.Create<Marker>(this, MarkerClick)
        });
    }

    void MapOnDoubleClick(Blazor.GoogleMap.Map.Events.MouseEventArgs mouseEvent)
    {
        Console.WriteLine($"DoubleClicked! {mouseEvent.LatLng.Lat}, {mouseEvent.LatLng.Lng}");
    }

    void MarkerClick(Marker marker)
    {
        selectedMarker = marker;
        Console.WriteLine(marker.Options.Title);
    }

    async Task RemoveMarker()
    {
        if (selectedMarker != null)
        {
            var removedResult = await markers.Remove(selectedMarker);
            Console.WriteLine($"Marker removed: {removedResult}");
        }
    }
}
